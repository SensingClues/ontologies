buildscript {
  repositories {
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
}

plugins {
    id 'java'
    // Gradle Properties plugin
    id 'net.saliman.properties' version '1.5.1'

    id "com.marklogic.ml-gradle" version "4.1.0"

    id "io.github.http-builder-ng.http-plugin" version "0.1.1"
}

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/marklogic-community/Maven/' }
    maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
    mlcp {
        // stop Gradle from complaining about "SLF4J: Class path contains multiple SLF4J bindings."
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.avro', module: 'avro-tools'
    }
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.4"
    mlcp files("mlcp/conf")
    mlcp files("mlcp/lib")

    compile 'io.github.http-builder-ng:http-builder-ng-CLIENT:1.0.4'
}

task loadConfiguration(type: com.marklogic.gradle.task.MlcpTask) {
    group 'Configuration'
    classpath = configurations.mlcp
    command = "IMPORT"
    username=mlFlowOperatorUserName
    password=mlFlowOperatorPassword
    port = mlStagingPort.toInteger()
    input_file_path = "data/configuration"
    input_file_pattern=".*\\.json"
    output_uri_replace = ".*data,''"
    output_permissions = "data-hub-operator,read,data-hub-operator,update"
    output_collections = "configuration,configuration/project"
}

project.properties.each{ key, value ->
    if (key.startsWith("mlcpOntology") && value) {
        def seq = key.tokenize("-")
        def graph = seq[1]
        task "mlcpOntologyDelete-${graph}"(type: com.marklogic.gradle.task.MarkLogicTask) {
            group = "MLCP OntologyDelete"
            doFirst {
                println "deleting triple graph http://sensingclues.nl/${graph}"
            }
            doLast {
                try {
                    getManageClient().delete("/v1/graphs?database=${mlFinalDbName}&graph=http://sensingclues.nl/${graph}")
                } catch (e) {
                    println "Ontology in graph ${graph} was not loaded..."
                }
            }
        }
        task "mlcpOntologyLoad-${graph}"(type: DhfOntologyMlcpTask) {
            group = "MLCP OntologyLoad"
            input_file_pattern = value
            output_collections = "http://sensingclues.nl/${graph}"
        }
    }
}

task deleteOntology() {
    dependsOn {
        tasks.findAll { task -> "MLCP OntologyDelete".equals(task.group) }
    }
}

task loadOntology(dependsOn: ['deleteOntology']) {
    dependsOn {
        tasks.findAll { task -> "MLCP OntologyLoad".equals(task.group) }
    }
}

class DhfOntologyMlcpTask extends com.marklogic.gradle.task.MlcpTask {
    DhfOntologyMlcpTask() {
        classpath = project.configurations.mlcp
        command = "IMPORT"
        port = project.property("mlFinalPort").toInteger()
        input_file_path = project.property('sccssOntologyLocation')
        input_file_type = "RDF"
        output_permissions = "data-hub-operator,read,data-hub-operator,update"
    }
}

task loadOntologyStaging(type: DhfOntologyMlcpTask) {
    group 'Configuration Ontology'
    port = mlStagingPort.toInteger()
    input_file_pattern=".*\\.trig"
    output_collections = "SCCSS-Ontology"
}

