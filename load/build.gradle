buildscript {
  repositories {
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
}

plugins {
    id 'java'
    // Gradle Properties plugin
    id 'net.saliman.properties' version '1.5.1'

    id "com.marklogic.ml-gradle" version "4.1.0"

    id "io.github.http-builder-ng.http-plugin" version "0.1.1"
}

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/marklogic-community/Maven/' }
    maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
    mlcp {
        // stop Gradle from complaining about "SLF4J: Class path contains multiple SLF4J bindings."
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.avro', module: 'avro-tools'
    }
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.4"
    mlcp files("mlcp/conf")
    mlcp files("mlcp/lib")

    compile 'io.github.http-builder-ng:http-builder-ng-CLIENT:1.0.4'
}

project.properties.each{ key, value ->
    if (key.startsWith("sccssProject-")) {
        def seq = key.tokenize("-")
        def id = seq[1]
        seq = value.tokenize("|")
        def name = seq[0]
        def description = seq[1]
        task "deployProject-${id}" (type: io.github.httpbuilderng.http.HttpTask) {
            group = "Deploy Project"
            config {
                request.uri = 'http://' + mlHost + ":" + mlStagingPort.toInteger()
                request.contentType = 'application/json'
                request.auth.digest(mlUsername, mlPassword)
                request.body = [name: name, description: description, id: id]
            }
            post {
                request.uri.path = '/v1/resources/project'
                response.success {  groovyx.net.http.FromServer fs, Object body ->
                    println "Success: ${fs.statusCode}, Response is: ${body}"
                }
                response.failure { groovyx.net.http.FromServer fs, Object body ->
                    println "Failure: ${fs.statusCode}, Response is: ${body}"
                }
            }
        }
    }
}

task deployProjects(group: project.name) {
    dependsOn {
        tasks.findAll { task -> "Deploy Project".equals(task.group) }
    }
}


class DhfOntologyMlcpTask extends com.marklogic.gradle.task.MlcpTask {
    DhfOntologyMlcpTask() {
        classpath = project.configurations.mlcp
        command = "IMPORT"
        port = project.property("mlFinalPort").toInteger()
        input_file_type = "RDF"
    }
}

project.properties.each{ key, value ->
    if (key.startsWith("mlcpOntology")) {
        def seq = key.tokenize("-")
        def graph = seq[1]
        task "sccssOntologyDelete-${graph}"(type: com.marklogic.gradle.task.MarkLogicTask) {
            group = "MLCP OntologyDelete"
            doFirst {
                println "deleting triple graph http://sensingclues.nl/${graph}"
            }
            doLast {
                try {
                    getManageClient().delete("/v1/graphs?database=${mlFinalDbName}&graph=http://sensingclues.nl/${graph}")
                } catch (e) {
                    println "Ontology in graph http://sensingclues.nl/${graph} was not loaded, moving on..."
                    println ""
                }
            }
        }
        if (value) {
            task "sccssOntologyLoad-${graph}"(type: DhfOntologyMlcpTask) {
                group = "MLCP OntologyLoad"
                input_file_path = value
                output_collections = "http://sensingclues.nl/${graph}"
                if (graph == 'SCCSSOntology') {
                    output_permissions = "focus-role,read,data-hub-operator,read,data-hub-operator,update"
                } else {
                    output_permissions = "focus-project-${graph}-member,read,data-hub-operator,read,data-hub-operator,update"
                }
            }
        }
    }
}

task deleteOntologies(group: project.name) {
    dependsOn {
        tasks.findAll { task -> "MLCP OntologyDelete".equals(task.group) }
    }
}

task reloadOntologies(dependsOn: ['deployProjects', 'deleteOntologies'], group: project.name) {
    dependsOn {
        tasks.findAll { task -> "MLCP OntologyLoad".equals(task.group) }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    tasks.findAll { task ->
        if ( task.name.startsWith("ml") || task.name.startsWith("dhf") )  {
            task.enabled=false
            throw new GradleException(
                "\n#############################################################################"+
                "\n### ML-Gradle and DHF tasks have been disabled, run them from sccss-mdh2! ###"+
                "\n#############################################################################")
        }
    }
}
